name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0         # mike needs history
          persist-credentials: true

      - uses: actions/setup-python@v6
        with:
          python-version: 3.x

      - uses: PSModule/GitHub-Script@v1
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_MERGED: ${{ github.event.pull_request.merged }}
        with:
          Script: |
            pip install mkdocs mkdocs-material mike

            if ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
                $event = Get-Content $env:GITHUB_EVENT_PATH | ConvertFrom-Json
                $action = $event.action
                $prNumber = $env:PR_NUMBER
                $prVersion = "pr-$prNumber"
                $merged = $env:PR_MERGED -eq 'true'

                if ($action -eq 'closed') {
                    # Always clean up the PR preview version
                    Write-Host "Cleaning up PR preview version: $prVersion"
                    mike delete --push $prVersion

                    if ($merged) {
                        # PR was merged - deploy a versioned page
                        Write-Host "PR was merged, deploying versioned documentation"
                        # TODO: Determine version from git tags, version file, or milestone
                        # For now, using a placeholder - customize this based on your versioning strategy
                        $version = "0.3"  # Replace with actual version detection logic
                        mike deploy --push --update-aliases $version latest
                        mike set-default --push latest
                        Write-Host "Deployed version $version and updated latest"
                    } else {
                        # PR was closed without merging (abandoned)
                        Write-Host "PR was closed without merging (abandoned), cleanup complete"
                    }
                } else {
                    # PR opened, synchronized, or reopened - deploy preview
                    Write-Host "Deploying PR preview version: $prVersion"
                    mike deploy --push $prVersion --prop-set hidden=true
                    gh pr comment $prNumber --body "Documentation preview available at https://psmodule.github.io/docs-test/$prVersion/"
                }
            } else {
                # Direct push to main branch
                Write-Host "Direct push to main branch, deploying versioned documentation"
                # TODO: Determine version from git tags or version file
                $version = "0.3"  # Replace with actual version detection logic
                mike deploy --push --update-aliases $version latest
                mike set-default --push latest
            }
